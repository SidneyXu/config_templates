apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

uploadArchives {

    repositories {
        mavenDeployer {

            //test start
//        beforeDeployment { MavenDeployment deployment->
//            signing.signPom(deployment)
//        }

            //test end
            //then can use project.ext.username

            name = 'mavenCentralReleaseDeployer'
            snapshotRepository(url: "http://127.0.0.1:8081/nexus/content/repositories/snapshots/") {
                authentication(userName: "admin", password: "admin123")
            }
            pom.version = "1.0.1-SNAPSHOT"
            pom.artifactId = "android-lib"
            pom.groupId = "com.example"
            pom.name = "android lib example"
            pom.packaging = 'aar'

            //start
//        pom.project{
//            name 'aa'
//            description ''
//            url ''
//            inceptionYear '2015'
//
//            licenses{
//                license{
//                    name 'The Apache Software License, Version 2.0'
//                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    distribution 'repo'
//                }
//            }
//
//            scm{
//                url "https://android.googlesource.com/platform/tools/build"
//                connection "git://android.googlesource.com/platform/tools/build.git"
//            }
//
//            developers {
//                developer {
//                    name 'The Android Open Source Project'
//                }
//            }
//        }

            //end
        }
    }

}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        //android
        exclude "**/R.java"

        //other
        exclude '**/demo/**'
    }

    task("javadoc${variant.name}", type: Jar) {
        classifier = "javadoc"
        description "Bundles Javadoc into a JAR file for $variant.name."
        from tasks["generate${variant.name}Javadoc"]

    }

    task("jar${variant.name}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
        exclude '**/R.class', '**/R$*.class', '**/R.html', '**/R.*.html', 'BuildConfig.class'
        exclude '**/test/'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.0.0'

    compile project(":example-java-lib")
}

//test
if (project.hasProperty("secure.properties")
        && new File(project.property("secure.properties")).exists()) {

    Properties props = new Properties()
    props.load(new FileInputStream(file(project.property("secure.properties"))))

}


apply plugin: 'maven-publish'
publishing {
    publications {

        repositories.maven {
            url "http://127.0.0.1:8081/nexus/content/repositories/snapshots/"
            credentials {
                username "admin"
                password "admin123"
            }
        }

        maven(MavenPublication) {
            artifacts {
                groupId 'com.example'
                artifactId 'android-lib'
                version '1.0.1-SNAPSHOT'
                artifact 'build/outputs/aar/example-android-lib-release.aar'
            }
        }
    }
    //snapshot only allow published version name contains snapshot

}

//test
// add javadoc/source jar tasks as artifacts
//artifacts {
//    archives jar
//    archives sourcesJar
//    archives javadocJar
//}
artifacts {
    //archives packageReleaseJar
    archives androidSourcesJar
    archives androidJavadocsJar
}
//signing {
//   required { project.has("release") && gradle.taskGraph.hasTask("uploadArchives") }
//  sign configurations.archives
//}